---
- name: Client setup
  hosts: client
  become: yes
  become_user: root
  remote_user: pi

  tasks:
    - name: "install deps"
      apt:
        name: "{{ item }}"
        state: latest
      loop:
        - gphoto2

    - name: "create usergroup '{{ client.gphoto.group }}'"
      ansible.builtin.group:
        name: "{{ client.gphoto.group }}"
        state: present

    - name: "create user '{{ client.gphoto.user }}'"
      ansible.builtin.user:
        name: "{{ client.gphoto.user }}"
        groups:
          - "{{ client.gphoto.group }}"

    - name: "Prepare filesystem at '{{ client.root_folder }}'"
      ansible.builtin.file:
        path: "{{ client.root_folder }}"
        state: directory
        recurse: yes
        owner: "{{ client.gphoto.user }}"
        group: "{{ client.gphoto.group }}"

    # GPHOTO

    - name: "make '{{ client.gphoto.user }}' owner of rclone config-file"
      ansible.builtin.file:
        path: "/home/{{ client.gphoto.user }}/.config/rclone/rclone.conf"
        state: file
        owner: "{{ client.gphoto.user }}"
        group: "{{ client.gphoto.group }}"

    - name: "Prepare filesystem at '{{ client.data_folder }}'"
      ansible.builtin.file:
        path: "{{ client.data_folder }}"
        state: directory
        recurse: yes
        owner: "{{ client.gphoto.user }}"
        group: "{{ client.gphoto.group }}"

    - name: "Place {{ client.root_folder }}/gphoto2-start.sh"
      ansible.builtin.template:
        src: files/gphoto2-start.sh.j2
        dest: "{{ client.root_folder }}/gphoto2-start.sh"
        owner: "{{ client.gphoto.user }}"
        mode: "u+rwx"

    - name: "Place {{ client.root_folder }}/gphoto.service"
      ansible.builtin.template:
        src: files/gphoto.service.j2
        dest: "{{ client.service_folder }}/gphoto.service"
        mode: "u+rwx"

    - name: "Enable and start gphoto.service"
      ansible.builtin.service:
        name: gphoto.service
        state: started
        enabled: yes

    # RCLONE

    - name: "install rclone"
      include_role:
        name: ansible-rclone
      vars:
        rclone_arch: "arm"
        rclone_config_location: "/home/{{ client.gphoto.user }}/.config/rclone/rclone.conf"
        rclone_configs:
          - name: "nextcloud"
            properties:
              type: "webdav"
              vendor: "nextcloud"
              url: "{{ lookup('env', 'LAPS_RCLONE_URL') }}"
              user: "{{ lookup('env', 'LAPS_RCLONE_USER') }}"
              pass: "{{ lookup('env', 'LAPS_RCLONE_PASS') }}"
              bearer_token:

    - name: "Place {{ client.root_folder }}/rclone.sh"
      ansible.builtin.template:
        src: files/rclone.sh.j2
        owner: "{{ client.gphoto.user }}"
        mode: "u+rwx"
        dest: "{{ client.root_folder }}/rclone.sh"

    - name: Set up rclone cronjob
      ansible.builtin.cron:
        name: "laps: rclone job"
        day: "{{ client.rclone.cron.day }}"
        hour: "{{ client.rclone.cron.hour }}"
        minute: "{{ client.rclone.cron.minute }}"
        job: "/usr/bin/env {{ client.root_folder }}/rclone.sh"
        user: "{{ client.gphoto.user }}"

    # LOGROTATE

    - name: "Place {{ client.logrotate.config_file }}"
      ansible.builtin.template:
        src: files/logrotate.cfg.j2
        owner: "{{ client.gphoto.user }}"
        mode: "u+rwx"
        dest: "{{ client.logrotate.config_file }}"

    - name: Set up logrotate cronjob
      ansible.builtin.cron:
        name: "laps: logrotate job"
        day: "{{ client.logrotate.cron.day }}"
        hour: "{{ client.logrotate.cron.hour }}"
        minute: "{{ client.logrotate.cron.minute }}"
        job: "logrotate {{ client.logrotate.config_file }}"
        user: "{{ client.gphoto.user }}"
